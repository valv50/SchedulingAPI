// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scheduling.Infrastructure.Persistence;


#nullable disable

namespace SchedulingAPI.Migrations
{
    [DbContext(typeof(SchedulingContext))]
    partial class SchedulingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchedulingAPI.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("MarketId");

                    b.HasIndex("TypeId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("SchedulingAPI.Models.CompanyType", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.HasKey("TypeId");

                    b.ToTable("CompanyType", (string)null);
                });

            modelBuilder.Entity("SchedulingAPI.Models.Market", b =>
                {
                    b.Property<Guid>("MarketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("MarketName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MarketId");

                    b.ToTable("Market", (string)null);
                });

            modelBuilder.Entity("SchedulingAPI.Models.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScheduleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleId");

                    b.HasIndex("MarketId");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("SchedulingAPI.Models.ScheduleDate", b =>
                {
                    b.Property<Guid>("ScheduleDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<byte>("Date")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleDateId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleDate", (string)null);
                });

            modelBuilder.Entity("SchedulingAPI.Models.ScheduleType", b =>
                {
                    b.Property<Guid>("ScheduleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ScheduleTypeId");

                    b.HasIndex("TypeId");

                    b.HasIndex(new[] { "ScheduleId", "TypeId" }, "IX_ScheduleType");

                    b.ToTable("ScheduleType", (string)null);
                });

            modelBuilder.Entity("SchedulingAPI.Models.Company", b =>
                {
                    b.HasOne("SchedulingAPI.Models.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_Market");

                    b.HasOne("SchedulingAPI.Models.CompanyType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_CompanyType");

                    b.Navigation("Market");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SchedulingAPI.Models.Schedule", b =>
                {
                    b.HasOne("SchedulingAPI.Models.Market", "Market")
                        .WithMany("Schedules")
                        .HasForeignKey("MarketId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_Market");

                    b.Navigation("Market");
                });

            modelBuilder.Entity("SchedulingAPI.Models.ScheduleDate", b =>
                {
                    b.HasOne("SchedulingAPI.Models.Schedule", "Schedule")
                        .WithMany("ScheduleDates")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_ScheduleDate_Schedule");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SchedulingAPI.Models.ScheduleType", b =>
                {
                    b.HasOne("SchedulingAPI.Models.Schedule", "Schedule")
                        .WithMany("ScheduleTypes")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_ScheduleType_Schedule");

                    b.HasOne("SchedulingAPI.Models.CompanyType", "Type")
                        .WithMany("ScheduleTypes")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ScheduleType_CompanyType");

                    b.Navigation("Schedule");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SchedulingAPI.Models.CompanyType", b =>
                {
                    b.Navigation("ScheduleTypes");
                });

            modelBuilder.Entity("SchedulingAPI.Models.Market", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SchedulingAPI.Models.Schedule", b =>
                {
                    b.Navigation("ScheduleDates");

                    b.Navigation("ScheduleTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
